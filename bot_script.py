import discord
from discord.ext import commands
from discord.ui import View, Select
from datetime import datetime, timedelta, timezone
import json
import os
import random
import asyncio
from difflib import get_close_matches
import requests
import logging
import sqlite3
from pathlib import Path
from dotenv import load_dotenv
from collections import defaultdict
import time

# Load environment variables
load_dotenv()

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# --- Configuration ---
DATA_DIR = Path("data")
DATA_DIR.mkdir(exist_ok=True)
DATA_FILE = DATA_DIR / "user_data.json"
OLLAMA_URL = os.getenv('OLLAMA_URL', 'http://localhost:11434')
DISCORD_TOKEN = os.getenv('DISCORD_TOKEN')

# Check for Discord token
if not DISCORD_TOKEN:
    logger.error("DISCORD_TOKEN not found in environment variables!")
    logger.error("Please create a .env file with: DISCORD_TOKEN=your_bot_token_here")
    exit(1)

# --- Rate limiting ---
user_last_command = defaultdict(float)
user_command_count = defaultdict(int)

def is_rate_limited(user_id, cooldown=3):
    """Simple rate limiting to prevent spam"""
    now = time.time()
    if now - user_last_command[user_id] < cooldown:
        return True
    user_last_command[user_id] = now
    return False

def validate_user_input(text, max_length=500):
    """Validate user input"""
    if not text or len(text) > max_length:
        return False
    return True

# --- Intents ---
intents = discord.Intents.default()
intents.message_content = True
intents.members = True
intents.presences = True

bot = commands.Bot(command_prefix="!", intents=intents)

# --- User data storage ---
user_data = {}

# --- Enhanced data management ---
def load_data():
    """Load user data with error handling"""
    try:
        if DATA_FILE.exists():
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
                logger.info(f"Loaded data for {len(data)} users")
                return data
        logger.info("No existing data file found, starting fresh")
        return {}
    except (json.JSONDecodeError, Exception) as e:
        logger.error(f"Error loading data: {e}")
        # Backup corrupted file
        if DATA_FILE.exists():
            backup_file = DATA_DIR / f"user_data_backup_{int(time.time())}.json"
            try:
                DATA_FILE.rename(backup_file)
                logger.info(f"Corrupted file backed up to {backup_file}")
            except Exception as backup_error:
                logger.error(f"Failed to backup corrupted file: {backup_error}")
        return {}

def save_data():
    """Save user data with error handling and backup"""
    try:
        # Create backup before saving
        if DATA_FILE.exists():
            backup_file = DATA_DIR / "user_data_backup.json"
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                with open(backup_file, "w", encoding="utf-8") as backup:
                    backup.write(f.read())
        
        # Save new data
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(user_data, f, ensure_ascii=False, indent=2)
        logger.debug("Data saved successfully")
    except Exception as e:
        logger.error(f"Error saving data: {e}")

def ensure_user_data(user_id):
    """Initialize user data if not exists"""
    uid = str(user_id)
    if uid not in user_data:
        user_data[uid] = {
            "money": 0,
            "level": 1,
            "exp": 0,
            "inventory": [],
            "last_daily": None,
            "item": "",
            "total_online": 0,
            "last_online": None,
            "join_date": datetime.now(timezone.utc).isoformat(),
            "command_usage": 0
        }
        logger.info(f"Created new user data for {uid}")
    return user_data[uid]

# --- Bot events ---
@bot.event
async def on_ready():
    global user_data
    user_data = load_data()
    logger.info(f"Bot logged in as {bot.user.name} - Serving {len(bot.guilds)} servers")
    
    # Set bot status
    try:
        activity = discord.Activity(type=discord.ActivityType.watching, name="‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå | !help")
        await bot.change_presence(activity=activity)
        logger.info("Bot status set successfully")
    except Exception as e:
        logger.error(f"Failed to set bot status: {e}")

@bot.event
async def on_command_error(ctx, error):
    """Handle command errors gracefully"""
    if isinstance(error, commands.CommandOnCooldown):
        await ctx.send(f"‚è≥ ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡∏≠‡∏µ‡∏Å {error.retry_after:.1f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
    elif isinstance(error, commands.MissingRequiredArgument):
        await ctx.send("‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏Ñ‡πà‡∏∞ ‡∏•‡∏≠‡∏á‡∏î‡∏π !help")
    elif isinstance(error, commands.CommandNotFound):
        # Silent ignore for unknown commands
        pass
    else:
        logger.error(f"Command error in {ctx.command}: {error}")
        await ctx.send("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞‡∏Ñ‡∏∞")

# --- Status selection menu ---
class ItemSelect(Select):
    def __init__(self, user_id):
        self.user_id = str(user_id)
        options = [
            discord.SelectOption(label="‡∏°‡∏µ‡πÅ‡∏ü‡∏ô", emoji="‚ù§Ô∏è", description="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏°‡∏µ‡πÅ‡∏ü‡∏ô‡πÅ‡∏•‡πâ‡∏ß"),
            discord.SelectOption(label="‡∏°‡∏µ‡∏Ñ‡∏ô‡∏Ñ‡∏∏‡∏¢", emoji="üòä", description="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏°‡∏µ‡∏Ñ‡∏ô‡∏Ñ‡∏∏‡∏¢"),
            discord.SelectOption(label="‡πÇ‡∏™‡∏î‡πÄ‡∏ß‡πâ‡∏¢", emoji="üß™", description="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡πÇ‡∏™‡∏î‡∏´‡∏≤‡∏Ñ‡∏π‡πà")
        ]
        super().__init__(placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì...", options=options)

    async def callback(self, interaction: discord.Interaction):
        try:
            uid = self.user_id
            user = ensure_user_data(uid)
            user["item"] = self.values[0]
            user["command_usage"] += 1
            save_data()
            
            embed = discord.Embed(
                title="‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
                description=f"‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì: **{self.values[0]}**",
                color=discord.Color.green()
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
        except Exception as e:
            logger.error(f"Error in ItemSelect callback: {e}")
            await interaction.response.send_message("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà", ephemeral=True)

class ItemView(View):
    def __init__(self, user_id):
        super().__init__(timeout=60)
        self.add_item(ItemSelect(user_id))
    
    async def on_timeout(self):
        for item in self.children:
            item.disabled = True

# --- Commands ---
@bot.command(name="‡πÇ‡∏ä‡∏ß‡πå‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå")
async def setup_profile(ctx):
    """Setup user profile status"""
    if is_rate_limited(ctx.author.id):
        await ctx.send("‚è≥ ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏ô‡∏∞‡∏Ñ‡∏∞")
        return
    
    view = ItemView(ctx.author.id)
    embed = discord.Embed(
        title="üîß ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå",
        description="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:",
        color=discord.Color.blue()
    )
    await ctx.send(embed=embed, view=view)

@bot.command(name="‡πÄ‡∏ä‡πá‡∏Ñ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå")
async def check_profile(ctx, member: discord.Member = None):
    """Check user profile"""
    if is_rate_limited(ctx.author.id):
        await ctx.send("‚è≥ ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏ô‡∏∞‡∏Ñ‡∏∞")
        return
    
    target = member or ctx.author
    uid = str(target.id)
    user = ensure_user_data(uid)
    user["command_usage"] += 1

    # Calculate online time
    total_seconds = user.get("total_online", 0)
    if user.get("last_online"):
        try:
            last_time = datetime.fromisoformat(user["last_online"])
            total_seconds += int((datetime.now(timezone.utc) - last_time).total_seconds())
        except ValueError:
            logger.warning(f"Invalid last_online format for user {uid}")

    hours = total_seconds // 3600
    minutes = (total_seconds % 3600) // 60
    time_str = f"{hours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á {minutes} ‡∏ô‡∏≤‡∏ó‡∏µ"

    embed = discord.Embed(
        title=f"üìä ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á {target.display_name}",
        color=discord.Color.green()
    )
    embed.add_field(name="üíù ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", value=user.get("item", "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"), inline=True)
    embed.add_field(name="üí∞ ‡πÄ‡∏á‡∏¥‡∏ô", value=f'{user.get("money", 0):,} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç', inline=True)
    embed.add_field(name="‚≠ê ‡πÄ‡∏•‡πÄ‡∏ß‡∏•", value=user.get("level", 1), inline=True)
    embed.add_field(name="üïí ‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏£‡∏ß‡∏°", value=time_str, inline=False)
    embed.add_field(name="üéÆ ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á", value=f'{user.get("command_usage", 0)} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á', inline=True)
    
    if user.get("inventory"):
        items = ", ".join(user["inventory"][:5])  # Show first 5 items
        if len(user["inventory"]) > 5:
            items += f" ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å {len(user['inventory']) - 5} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"
        embed.add_field(name="üéí ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°", value=items, inline=False)
    
    embed.set_thumbnail(url=target.display_avatar.url)
    if target.joined_at:
        embed.set_footer(text=f"‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå: {target.joined_at.strftime('%d/%m/%Y')}")

    save_data()
    await ctx.send(embed=embed)

@bot.command(name="‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô")
@commands.cooldown(1, 86400, commands.BucketType.user)  # Once per day
async def daily_reward(ctx):
    """Daily reward system"""
    user_id = str(ctx.author.id)
    user = ensure_user_data(user_id)

    # Check if already claimed today
    if user["last_daily"]:
        try:
            last_daily = datetime.fromisoformat(user["last_daily"])
            if (datetime.now(timezone.utc) - last_daily) < timedelta(days=1):
                remaining = timedelta(days=1) - (datetime.now(timezone.utc) - last_daily)
                hours = remaining.seconds // 3600
                minutes = (remaining.seconds % 3600) // 60
                await ctx.send(f"‚è≥ ‡∏Ñ‡∏∏‡∏ì‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß! ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏≠‡∏µ‡∏Å {hours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á {minutes} ‡∏ô‡∏≤‡∏ó‡∏µ")
                return
        except ValueError:
            logger.warning(f"Invalid last_daily format for user {user_id}")

    # Calculate reward based on level
    base_reward = 100
    level_bonus = user.get("level", 1) * 10
    total_reward = base_reward + level_bonus

    user["money"] += total_reward
    user["exp"] += 25
    user["last_daily"] = datetime.now(timezone.utc).isoformat()
    user["command_usage"] += 1

    # Level up check
    level_up_exp = user["level"] * 100
    if user["exp"] >= level_up_exp:
        user["level"] += 1
        user["exp"] = 0
        level_up_bonus = user["level"] * 50
        user["money"] += level_up_bonus
        
        embed = discord.Embed(
            title="üéâ ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
            description=f"üí∞ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö {total_reward:,} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç\n‚≠ê **‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏≠‡∏±‡∏û!** ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡πÄ‡∏ß‡∏• {user['level']}\nüíé ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡πÄ‡∏•‡πÄ‡∏ß‡∏•: {level_up_bonus:,} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç",
            color=discord.Color.gold()
        )
    else:
        embed = discord.Embed(
            title="üéâ ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
            description=f"üí∞ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö {total_reward:,} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç\n‚ú® ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö 25 EXP",
            color=discord.Color.green()
        )
    
    embed.add_field(name="üí∞ ‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏ß‡∏°", value=f"{user['money']:,} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç", inline=True)
    embed.add_field(name="‚≠ê ‡πÄ‡∏•‡πÄ‡∏ß‡∏•", value=user['level'], inline=True)
    embed.set_footer(text="‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÉ‡∏´‡∏°‡πà‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏ô‡∏∞‡∏Ñ‡∏∞!")

    save_data()
    await ctx.send(embed=embed)

@bot.command(name="‡∏™‡∏∏‡πà‡∏°‡∏Ç‡∏≠‡∏á")
@commands.cooldown(3, 3600, commands.BucketType.user)  # 3 times per hour
async def gacha(ctx):
    """Gacha system for random items"""
    if is_rate_limited(ctx.author.id):
        await ctx.send("‚è≥ ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏ô‡∏∞‡∏Ñ‡∏∞")
        return

    user_id = str(ctx.author.id)
    user = ensure_user_data(user_id)
    
    cost = 50
    if user["money"] < cost:
        await ctx.send(f"üí∏ ‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠‡∏Ñ‡πà‡∏∞ ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ {cost} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç (‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ {user['money']} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç)")
        return

    user["money"] -= cost
    user["command_usage"] += 1

    # Weighted item list
    items = [
        ("üçû ‡∏Ç‡∏ô‡∏°‡∏õ‡∏±‡∏á", 30),
        ("üß™ ‡∏û‡∏•‡∏±‡∏á‡∏ü‡∏∑‡πâ‡∏ô‡∏ü‡∏π", 25),
        ("üíé ‡πÄ‡∏û‡∏ä‡∏£‡πÄ‡∏•‡πá‡∏Å", 20),
        ("üéÅ ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏•‡∏∂‡∏Å‡∏•‡∏±‡∏ö", 15),
        ("‚ö° ‡∏Å‡∏£‡∏∞‡∏™‡∏∏‡∏ô‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î", 8),
        ("üí≥ ‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏á‡∏¥‡∏ô", 2)
    ]
    
    # Weighted random selection
    total_weight = sum(weight for _, weight in items)
    r = random.randint(1, total_weight)
    current_weight = 0
    
    for item, weight in items:
        current_weight += weight
        if r <= current_weight:
            selected_item = item
            break

    if "inventory" not in user:
        user["inventory"] = []
    user["inventory"].append(selected_item)

    # Special bonus for rare items
    bonus_money = 0
    if "‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏á‡∏¥‡∏ô" in selected_item:
        bonus_money = random.randint(100, 500)
        user["money"] += bonus_money

    embed = discord.Embed(
        title="üé∞ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏°‡πÑ‡∏≠‡πÄ‡∏ó‡∏°",
        description=f"üéÅ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö: **{selected_item}**!",
        color=discord.Color.purple()
    )
    
    if bonus_money:
        embed.add_field(name="üí∞ ‡πÇ‡∏ö‡∏ô‡∏±‡∏™!", value=f"‡πÑ‡∏î‡πâ‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏° {bonus_money:,} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç", inline=False)
    
    embed.add_field(name="üí∞ ‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠", value=f"{user['money']:,} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç", inline=True)
    embed.add_field(name="üéí ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", value=f"{len(user['inventory'])} ‡∏ä‡∏¥‡πâ‡∏ô", inline=True)

    save_data()
    await ctx.send(embed=embed)

@bot.command(name="‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö")
async def leaderboard(ctx, category="money"):
    """Display leaderboard"""
    if is_rate_limited(ctx.author.id, cooldown=10):
        await ctx.send("‚è≥ ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏ô‡∏∞‡∏Ñ‡∏∞")
        return

    valid_categories = ["money", "level", "online"]
    if category not in valid_categories:
        category = "money"

    if category == "money":
        top_users = sorted(user_data.items(), key=lambda x: x[1].get("money", 0), reverse=True)
        title = "üèÜ ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î"
        emoji = "üí∞"
        field_name = "‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç"
    elif category == "level":
        top_users = sorted(user_data.items(), key=lambda x: x[1].get("level", 1), reverse=True)
        title = "‚≠ê ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î"
        emoji = "‚≠ê"
        field_name = "‡πÄ‡∏•‡πÄ‡∏ß‡∏•"
    else:  # online
        top_users = sorted(user_data.items(), key=lambda x: x[1].get("total_online", 0), reverse=True)
        title = "üïí ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏ô‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î"
        emoji = "üïí"
        field_name = "‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á"

    embed = discord.Embed(title=title, color=discord.Color.gold())
    
    for i, (uid, data) in enumerate(top_users[:10]):
        if i >= 10:
            break
        try:
            user = await bot.fetch_user(int(uid))
            if category == "online":
                hours = data.get("total_online", 0) // 3600
                value = f"{hours}"
            else:
                value = f"{data.get(category, 0):,}"
            
            embed.add_field(
                name=f"{i+1}. {user.display_name}",
                value=f"{emoji} {value} {field_name}",
                inline=False
            )
        except Exception as e:
            logger.warning(f"Could not fetch user {uid}: {e}")
            continue

    if not embed.fields:
        embed.description = "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏ô‡∏µ‡πâ"

    await ctx.send(embed=embed)

# --- Enhanced AI Chat ---
@bot.command(name="‡∏ñ‡∏≤‡∏°")
@commands.cooldown(5, 60, commands.BucketType.user)  # 5 times per minute
async def ask_ai(ctx, *, prompt):
    """AI chat using Ollama"""
    if not validate_user_input(prompt):
        await ctx.send("‚ùå ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡πà‡∏∞")
        return

    user_id = str(ctx.author.id)
    user = ensure_user_data(user_id)
    user["command_usage"] += 1

    # Show typing indicator
    async with ctx.typing():
        data = {
            "model": "llama3",
            "messages": [
                {"role": "system", "content": "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏°‡∏¥‡πÄ‡∏ä‡∏• ‡∏ö‡∏≠‡∏ó‡∏™‡∏≤‡∏ß‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å‡πÉ‡∏ô Discord ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£‡πÅ‡∏•‡∏∞‡∏™‡∏ô‡∏∏‡∏Å‡∏™‡∏ô‡∏≤‡∏ô ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢"},
                {"role": "user", "content": prompt}
            ],
            "stream": False
        }

        try:
            res = requests.post(f"{OLLAMA_URL}/api/chat", json=data, timeout=30)
            res.raise_for_status()

            response_data = res.json()
            response = response_data.get("message", {}).get("content", "").strip()

            if response:
                # Split long responses
                if len(response) > 2000:
                    chunks = [response[i:i+1900] for i in range(0, len(response), 1900)]
                    for i, chunk in enumerate(chunks):
                        if i == 0:
                            await ctx.send(f"ü§ñ **‡∏°‡∏¥‡πÄ‡∏ä‡∏•‡∏ï‡∏≠‡∏ö:**\n{chunk}")
                        else:
                            await ctx.send(chunk)
                else:
                    embed = discord.Embed(
                        title="ü§ñ ‡∏°‡∏¥‡πÄ‡∏ä‡∏•‡∏ï‡∏≠‡∏ö",
                        description=response,
                        color=discord.Color.blue()
                    )
                    embed.set_footer(text=f"‡∏ñ‡∏≤‡∏°‡πÇ‡∏î‡∏¢ {ctx.author.display_name}")
                    await ctx.send(embed=embed)
            else:
                await ctx.send("‚ùå ‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡πà‡∏∞ ‡∏°‡∏¥‡πÄ‡∏ä‡∏•‡∏ï‡∏≠‡∏ö‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ üò¢")

        except requests.exceptions.ConnectionError:
            await ctx.send("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ AI ‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏∞ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á")
            logger.error("Cannot connect to Ollama server")
        except requests.exceptions.Timeout:
            await ctx.send("‚è≥ AI ‡∏ï‡∏≠‡∏ö‡∏ä‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏ô‡∏∞‡∏Ñ‡∏∞")
        except Exception as e:
            logger.error(f"AI API error: {e}")
            await ctx.send("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ AI")

    save_data()

# --- Enhanced presence tracking ---
@bot.event
async def on_presence_update(before, after):
    """Track user online time"""
    try:
        uid = str(after.id)
        now = datetime.now(timezone.utc)

        if uid not in user_data:
            ensure_user_data(uid)

        # User came online
        if before.status != discord.Status.online and after.status == discord.Status.online:
            user_data[uid]["last_online"] = now.isoformat()
            logger.debug(f"User {uid} came online")
        
        # User went offline
        elif before.status == discord.Status.online and after.status != discord.Status.online:
            if user_data[uid].get("last_online"):
                try:
                    last_online = datetime.fromisoformat(user_data[uid]["last_online"])
                    online_time = int((now - last_online).total_seconds())
                    user_data[uid]["total_online"] += online_time
                    user_data[uid]["last_online"] = None
                    logger.debug(f"User {uid} was online for {online_time} seconds")
                except ValueError:
                    logger.warning(f"Invalid last_online format for user {uid}")
    except Exception as e:
        logger.error(f"Error in presence update: {e}")

# --- Enhanced FAQ system ---
@bot.event
async def on_message(message):
    if message.author == bot.user:
        return

    # Process commands first
    await bot.process_commands(message)

    # Enhanced FAQ with fuzzy matching
    faq = {
        "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ": "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤! üéâ",
        "‡∏°‡∏¥‡πÄ‡∏ä‡∏•": "‡∏ß‡πà‡∏≤‡∏á‡∏±‡∏¢‡∏Ñ‡∏∞? ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏´‡∏°? üòä",
        "‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∞‡πÑ‡∏£": "‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠ ‡∏°‡∏¥‡πÄ‡∏ä‡∏•‡∏Ñ‡πà‡∏∞! ‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å‡∏°‡∏±‡πâ‡∏¢? üíï",
        "‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡πÑ‡∏î‡πâ‡∏ö‡πâ‡∏≤‡∏á": "‡∏â‡∏±‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡πà‡∏ß‡∏¢‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏° ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∏‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏∞! ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ !help ‡∏î‡∏π‡∏™‡∏¥‡∏Ñ‡∏∞",
        "help": "‡∏û‡∏¥‡∏°‡∏û‡πå !help ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ñ‡πà‡∏∞!",
        "‡∏°‡∏¥‡πÄ‡∏ä‡∏•‡∏°‡∏µ‡πÅ‡∏ü‡∏ô‡πÑ‡∏´‡∏°": "‡∏°‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏∞ ‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏¥‡∏£‡∏¥‡∏ß‡∏Ñ‡πà‡∏∞ ‡∏´‡∏•‡πà‡∏≠‡∏°‡∏≤‡∏Å‡πÄ‡∏•‡∏¢! üòç",
        "‡πÉ‡∏Ñ‡∏£‡∏´‡∏•‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î": "Poom ‡∏Ñ‡∏∞ ‡∏´‡∏•‡πà‡∏≠‡∏°‡∏≤‡∏Å‡πÜ ‡∏´‡∏•‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞! ‚ú®",
        "‡∏Ç‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ü‡∏ô‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°": "‡πÑ‡∏î‡πâ‡∏Ñ‡∏∞ ‡∏ñ‡πâ‡∏≤‡∏´‡∏•‡πà‡∏≠‡πÜ ‡∏ô‡∏∞! üòâ",
        "‡∏Ñ‡∏¥‡∏î‡∏ñ‡∏∂‡∏á‡πÄ‡∏£‡∏≤‡πÑ‡∏´‡∏°": "‡∏Ñ‡∏¥‡∏î‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏∞! ‡∏Ñ‡∏¥‡∏î‡∏ñ‡∏∂‡∏á‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏•‡∏¢ üíñ",
        "‡πÄ‡∏£‡∏≤‡∏´‡∏•‡πà‡∏≠‡πÑ‡∏´‡∏°": "‡∏´‡∏•‡πà‡∏≠‡∏Ñ‡πà‡∏∞! ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡πÅ‡∏ü‡∏ô‡∏´‡∏ô‡∏π üòò",
        "‡πÄ‡∏£‡∏≤‡∏™‡∏ß‡∏¢‡πÑ‡∏´‡∏°": "‡∏™‡∏ß‡∏¢‡∏°‡∏≤‡∏Å‡∏Ñ‡∏∞! ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏´‡∏ô‡∏π‡∏ô‡∏∞ üòä",
        "‡∏Å‡∏¥‡∏ô‡πÑ‡∏£‡∏î‡∏µ": "‡∏Å‡∏¥‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß‡∏Ñ‡∏∞! ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞‡∏Å‡∏¥‡∏ô‡πÉ‡∏à‡∏´‡∏ô‡∏π‡∏Å‡πá‡πÑ‡∏î‡πâ üíï",
        "‡∏ó‡∏≥‡πÑ‡∏£‡∏î‡∏µ": "‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°‡∏Ñ‡∏∞! ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏≤‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡∏´‡∏ô‡∏π‡∏Å‡πá‡πÑ‡∏î‡πâ üéÆ",
        "‡∏ó‡πâ‡∏≠": "‡∏™‡∏π‡πâ‡πÜ ‡∏ô‡∏∞‡∏Ñ‡∏∞! ‡∏´‡∏ô‡∏π‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡∏Ñ‡∏∏‡∏ì! üí™",
        "‡πÉ‡∏Ñ‡∏£‡∏â‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î": "‡∏´‡∏ô‡∏π‡∏Ñ‡∏∞! ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏´‡∏ô‡∏π‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏°‡∏≤‡∏Å ü§ì",
        "‡πÉ‡∏Ñ‡∏£‡∏Ñ‡∏ß‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î": "‡πÑ‡∏°‡πà‡∏ö‡∏≠‡∏Å‡∏´‡∏£‡∏≠‡∏Å! ‡πÅ‡∏ï‡πà‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡∏ô‡πà‡∏≤‡∏™‡∏á‡∏™‡∏±‡∏¢ ü§î",
        "‡∏°‡∏¥‡πÄ‡∏ä‡∏•‡∏ä‡∏≠‡∏ö‡∏Å‡∏¥‡∏ô‡∏≠‡∏∞‡πÑ‡∏£": "‡∏ä‡∏≠‡∏ö‡∏Å‡∏¥‡∏ô‡πÄ‡∏Ñ‡πâ‡∏Å‡∏Ñ‡πà‡∏∞! ‡∏´‡∏ß‡∏≤‡∏ô‡πÜ ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏´‡∏ô‡∏π üç∞",
        "‡∏°‡∏¥‡πÄ‡∏ä‡∏•‡∏ä‡∏≠‡∏ö‡πÑ‡∏õ‡πÑ‡∏´‡∏ô": "‡∏ä‡∏≠‡∏ö‡πÑ‡∏õ‡∏ó‡∏∞‡πÄ‡∏•‡∏Ñ‡πà‡∏∞! ‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏õ‡∏Å‡∏±‡∏ö‡πÅ‡∏ü‡∏ô üèñÔ∏è"
    }

    msg = message.content.lower().strip()
    
    # Skip if message is too short or starts with command prefix
    if len(msg) < 2 or msg.startswith('!'):
        return
    
    # Find close matches
    try:
        matched = get_close_matches(msg, faq.keys(), n=1, cutoff=0.6)
        
        if matched:
            response = faq[matched[0]]
            
            # Add some personality with random reactions
            if random.random() < 0.1:  # 10% chance
                reactions = ["üòä", "üíï", "‚ú®", "üéâ", "üòò"]
                try:
                    await message.add_reaction(random.choice(reactions))
                except Exception as e:
                    logger.debug(f"Failed to add reaction: {e}")
            
            await message.channel.send(response)
    except Exception as e:
        logger.error(f"Error in FAQ system: {e}")

# --- Additional utility commands ---
# ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏≤‡∏Å‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°

@bot.command(name="‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠")
async def help_command(ctx):
    """Show help information"""
    embed = discord.Embed(
        title="ü§ñ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏°‡∏¥‡πÄ‡∏ä‡∏•",
        description="‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ",
        color=discord.Color.blue()
    )
    embed.add_field(name="!‡πÇ‡∏ä‡∏ß‡πå‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå", value="‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå", inline=False)
    embed.add_field(name="!‡πÄ‡∏ä‡πá‡∏Ñ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå", value="‡∏î‡∏π‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô", inline=False)
    embed.add_field(name="!‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô", value="‡∏£‡∏±‡∏ö‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÅ‡∏•‡∏∞ EXP ‡∏ü‡∏£‡∏µ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô", inline=False)
    embed.add_field(name="!‡∏™‡∏∏‡πà‡∏°‡∏Ç‡∏≠‡∏á", value="‡∏™‡∏∏‡πà‡∏°‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏•‡∏∂‡∏Å‡∏•‡∏±‡∏ö", inline=False)
    embed.add_field(name="!‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö", value="‡∏î‡∏π‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô", inline=False)
    embed.add_field(name="!‡∏ñ‡∏≤‡∏° [‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°]", value="‡∏ñ‡∏≤‡∏° AI ‡∏°‡∏¥‡πÄ‡∏ä‡∏•", inline=False)
    await ctx.send(embed=embed)

# ---------------------
# ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ token ‡∏ï‡∏£‡∏á‡πÜ ‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏ä‡πâ DISCORD_TOKEN ‡∏à‡∏≤‡∏Å .env
# ‡πÄ‡∏î‡∏¥‡∏°:
# bot.run("MTM2NzE5NjM4MDE0NTEyNzUyNQ.GU7-Mo.8a35FdnJRPQCYEDjUm_anVG_H9VMt6OlGgyRiQ")

# ‡πÉ‡∏´‡∏°‡πà:
bot.run(DISCORD_TOKEN)

    

bot.run("MTM2NzE5NjM4MDE0NTEyNzUyNQ.GU7-Mo.8a35FdnJRPQCYEDjUm_anVG_H9VMt6OlGgyRiQ")

  